fmod BV-Signature is
  sorts Atom Unit Structure .
  subsort Atom < Structure .
  subsort Unit < Structure .

  ops a b c d e f g h i j k l m n p q r s : -> Atom .
  op , : -> Unit .
  op -_ : Atom -> Atom [ prec 50 ] .
  op [_,_] : Structure Structure -> Structure [assoc comm] .
  op {_,_} : Structure Structure -> Structure [assoc comm] .
  op <_;_> : Structure Structure -> Structure [assoc] .
 endfm

fmod Can-interact is
  inc BV-Signature .
  sort Interaction_Query .

  op can-interact : -> Interaction_Query .
  op empty-set : -> Interaction_Query .
  op _or_ : Interaction_Query Interaction_Query -> Interaction_Query [assoc comm prec 70] .
  op _ci_ : Atom Structure -> Interaction_Query [prec 60] .

  var R Q T U V : Structure .
  var A B : Atom .
  var C : Interaction_Query .

   eq A ci - A = can-interact .
   eq - A ci A = can-interact .
   eq A ci B = empty-set [owise] .

   eq [ T , U ] ci R = T ci R or U ci R .
   eq { T , U } ci R = T ci R or U ci R .
   eq < T ; U > ci R = T ci R or U ci R .

   eq A ci [ R , T ] = A ci R or A ci T .
   eq A ci { R , T } = A ci R or A ci T .
   eq A ci < R ; T > = A ci R or A ci T .

   eq can-interact or C = can-interact .
   eq empty-set or C = C .
endfm

mod FBVi_search is
  inc Can-interact .
  var R T Q U V : Structure . var A B C D E F G H I J : Atom .

  rl [ai-mix] : [ R, [A , - A] ] => R .

  rl [ai] : {R, [A , - A] } => R .

  crl [switch-3c] : [ { A , T } , B ] => { [ A , B ] , T }
                                        if A ci B = can-interact .

  crl [switch-3d] : [ { [ R , Q ] , T } , B ] => { [ [ R , Q ] , B ] , T }
                                        if [ R , Q ] ci B = can-interact .

  crl [switch-4c] : [ { A , T } , { U , V } ] => { [ A , { U , V } ] , T }
                                        if A ci { U , V } = can-interact .

  crl [switch-4d] : [ { [ R , Q ] , T } , { U , V } ] => { [ [ R , Q ] , { U , V } ] , T }
                                        if [ R , Q ] ci { U , V } = can-interact .

endm


*** The following formula can only be proved with an initial shallow instance .
***  search [ [ { [ - a , { a ,a } ] , [ - a , { a, a } ] } , { a , [ - a , - a ] } ] , { a , [ - a , - a ] } ] =>* [ a , - a ] .

*** ~~~~~~~ Instances of switch which require the unit ~~~~~~~~~~~~~~~~~~~~~~~~~~~
*** ~~~~~~~ These are of the form: [ R, T ] => { R, T } . ~~~~~~~~~~~~~~~~~~~~~~~~

search {[{a,[- a,- a]},{a,[- a,- a]}],{[- a,{a,a}],[- a,{a,a}]}}  =>* [ a , - a ] .

search {a,{[- a,- a],[{[- a,{a,a}],[- a,{a,a}]},{a,[- a,- a]}]}}  =>* [ a , - a ] .

search [{[- a,{a,a}],[- a,{a,a}]},{a,{a,{[- a,- a],[- a,- a]}}}]  =>* [ a , - a ] .

search [{a,[- a,- a]},{a,{[- a,- a],{[- a,{a,a}],[- a,{a,a}]}}}]  =>* [ a , - a ] .

search [{a,[- a,- a]},[{a,[- a,- a]},{a,{a,{- a,[- a,{a,a}]}}}]] =>* [ a , - a ] .

search [{[- a,{a,a}],[- a,{a,a}]},[{a,[- a,- a]},{a,{- a,- a}}]]  =>* [ a , - a ] .

*** ~~~~~~~ Instances of (regular) switch (deep) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

search {[- a,{a,a}],[- a,[{a,a},[{a,[- a,- a]},{a,[- a,- a]}]]]} =>* [ a , - a ] .

search {[- a,- a],[a,[{[- a,{a,a}],[- a,{a,a}]},{a,[- a,- a]}]]} =>* [ a , - a ] .

search [{[- a,{a,a}],[- a,{a,a}]},{[- a,- a],[a,{a,[- a,- a]}]}] =>* [ a , - a ] .

search [{a,[- a,- a]},{[- a,- a],[a,{[- a,{a,a}],[- a,{a,a}]}]}] =>* [ a , - a ] .

search {a,[- a,[- a,[{[- a,{a,a}],[- a,{a,a}]},{a,[- a,- a]}]]]} =>* [ a , - a ] .

search [{[- a,{a,a}],[- a,{a,a}]},{a,[- a,[- a,{a,[- a,- a]}]]}] =>* [ a , - a ] .

search [{a,[- a,- a]},{a,[- a,[- a,{[- a,{a,a}],[- a,{a,a}]}]]}] =>* [ a , - a ] .

search [{a,[- a,- a]},[{a,[- a,- a]},{a,{[a,- a],[- a,{a,a}]}}]] =>* [ a , - a ] .

*** ~~~~~~~ Instances of (regular) switch (shallow) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

search [{a,[- a,- a]},{[- a,{a,a}],[- a,[{a,a},{a,[- a,- a]}]]}] =>* [ a , - a ] .
